name: CI/CD whit Actions

on:
  push:
    branches:
      - "develop"
      - "homol"
      - "main"

permissions:
  id-token: write # obrigatório para usar autenticação OIDC
  contents: read # obrigatório para clonar o código do repositório

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Verificando Ambiente de CI/CD
        run: |
          PROJECT_ENVIRONMENT_AWS=${GITHUB_REF##*/}
          if [[ "$PROJECT_ENVIRONMENT_AWS" == "develop" ]]; then
            echo "Este é o ambiente de desenvolvimento"
            echo "PROJECT_ENVIRONMENT_AWS=DEV" >> $GITHUB_ENV
          elif [[ "$PROJECT_ENVIRONMENT_AWS" == "homol" ]]; then
            echo "Este é o ambiente de homologação"
            echo "PROJECT_ENVIRONMENT_AWS=HOM" >> $GITHUB_ENV
          elif [[ "$PROJECT_ENVIRONMENT_AWS" == "main" ]]; then
            echo "Este é o ambiente de produção"
            echo "PROJECT_ENVIRONMENT_AWS=PROD" >> $GITHUB_ENV
          fi

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ env.AWS_GITHUB_ACTIONS_ROLE }}
          role-duration-seconds: 900 # o TTL da sessão, em segundos.
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Setup Java JDK
        uses: actions/setup-java@v3.10.0
        with:
          java-version: '17'
          distribution: 'adopt'
          cache: gradle

      - name: Build Application Jar
        working-directory: ./app
        run: ./gradlew clean build

      - name: Docker Compose Build
        working-directory: ./
        run: docker compose --env-file=app/src/main/resources/.${{ env.PROJECT_ENVIRONMENT_AWS }} build

      - name: Build, tag, and push docker image to Amazon ECR
        run: |
          timestamp=$(date +'%y%m%d-%H%M')
          docker tag ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:latest ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_ECR_IMAGE_REPO_URL'] }}:${timestamp}
          docker tag ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:latest ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_ECR_IMAGE_REPO_URL'] }}:latest
          
          docker push ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_ECR_IMAGE_REPO_URL'] }}:${timestamp}
          docker push ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_ECR_IMAGE_REPO_URL'] }}:latest

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_TASK_DEFINITION_NAME'] }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_CONTAINER_NAME'] }}
          image: ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_ECR_IMAGE_REPO_URL'] }}:latest

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_SERVICE_NAME'] }}
          cluster: ${{ env[env.PROJECT_ENVIRONMENT_AWS + '_CLUSTER_NAME'] }}
          wait-for-service-stability: true

      - name: Login to DockerHub
        uses: docker/login-action@v2.1.0
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Push to Docker Hub Container registry
        run: |
          if [[ env.PROJECT_ENVIRONMENT_AWS == "DEV"]]; then
            timestamp=$(date +'%y%m%d-%H%M')
            docker tag ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:latest ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:${timestamp}
            docker push ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:${timestamp}
            docker push ${{ env.DOCKERHUB_USERNAME }}/entretien-backend-app:latest
            echo "Imagem publicada no Docker Hub com sucesso"
          else
            echo "Imagem só é publicada no Docker quando executado em ambiente de desenvolvimento"
          fi
